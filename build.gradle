import java.util.jar.JarEntry;

// Plugins
apply plugin : 'java'
apply plugin : 'eclipse'

///////////////////////////////////////////////////////////////////////////////////////////////////
//              Project properties
///////////////////////////////////////////////////////////////////////////////////////////////////

description = 'JGM-Generator'
version=1.1
sourceCompatibility = '1.7'
targetCompatibility = '1.7'

jar {
  manifest {
    attributes("Implementation-Title": description,
    "Implementation-Version": version,
    "sourceCompatibility": sourceCompatibility,
    "targetCompatibility" : targetCompatibility)
  }
}

compileJava.options.encoding = 'UTF-8'

///////////////////////////////////////////////////////////////////////////////////////////////////
//              External Dependencies
///////////////////////////////////////////////////////////////////////////////////////////////////
//sourceSets {
//	  main {
//	    java {
//	      srcDir 'src/annotations/java'
//	      srcDir 'src/main/java'
//	    }
//	    resources { srcDir 'src/main/resources' }
//	  }
//	  test {
//	    java {
//	      srcDir 'test'
//	    }
//	  }
//	}


repositories { mavenCentral() }


///////////////////////////////////////////////////////////////////////////////////////////////////
//              External Dependencies
///////////////////////////////////////////////////////////////////////////////////////////////////
// defining lib
ext {
  libs = [
    junit: 'junit:junit:4.12',
    log4j: 'log4j:log4j:1.2.17',
    velocity: 'org.apache.velocity:velocity:1.7',
    jgoodies_binding: 'com.jgoodies:jgoodies-binding:2.10.0',
    jgoodies_validation: 'com.jgoodies:jgoodies-validation:2.5.1'
  ]
}

dependencies {
  // Dependencies production Compile
  compile libs.log4j, libs.velocity, libs.jgoodies_validation
  // Dependencies test compile
  testCompile libs.junit, libs.jgoodies_binding
  // Dependencies code Generation
}


///////////////////////////////////////////////////////////////////////////////////////////////////
//              TASKS
///////////////////////////////////////////////////////////////////////////////////////////////////
task jarAnnotation(type: Jar){
  manifest {
    attributes("Implementation-Title": 'JGM-Generator Annotations',
    "Implementation-Version": version,
    "sourceCompatibility": sourceCompatibility,
    "targetCompatibility" : targetCompatibility)

  }
  baseName = "jarJGMAnnotation"
  // add all classes and resources produced from main source set
  // (e.g. src/main/java, src/main/resources)
  from(sourceSets.main.output) { // filter to only include certain class files (Ant glob pattern)
    include "andreas/klaus/generator/annotations/**" }
}

configure(jarAnnotation){
	group = 'Build'
	description = "Build jar with the Genaerator annotations"
}

task myEnv{
	doLast{
		println "task myEnv"
		println "GRADLE_USER_HOME: $project.gradle.gradleUserHomeDir"
		print 'JAVA_HOME: '
		println System.properties.'java.home'
		println 'AK ArtifactDir:' + project.properties['de.klausa.local.artifacts.dir']
	}
}

configure(myEnv){
	group = 'Environmental'
	description = "Show  Gradle Environment"
}

artifacts{
  archives jarAnnotation
}

uploadArchives {
  repositories {
     flatDir {
         dirs 'repos'
     }
  }
}


